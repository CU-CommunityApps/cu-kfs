package edu.cornell.kfs.sys.cache;

import java.util.Objects;
import java.util.concurrent.atomic.AtomicBoolean;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;
import org.springframework.beans.factory.DisposableBean;
import org.springframework.data.redis.connection.RedisStandaloneConfiguration;
import org.springframework.data.redis.connection.lettuce.LettuceClientConfiguration;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionFactory;
import org.springframework.data.redis.connection.lettuce.LettuceConnectionProvider;

import io.lettuce.core.AbstractRedisClient;
import io.lettuce.core.codec.RedisCodec;

public class ClientTrackingLettuceConnectionFactory extends LettuceConnectionFactory {

    private static final Logger LOG = LogManager.getLogger();

    private final RedisEventListener eventListener;
    private final AtomicBoolean initializedProviderForTracking;

    public ClientTrackingLettuceConnectionFactory(RedisStandaloneConfiguration standaloneConfig,
            LettuceClientConfiguration clientConfig, RedisEventListener eventListener) {
        super(standaloneConfig, clientConfig);
        Objects.requireNonNull(eventListener, "eventListener cannot be null");
        this.eventListener = eventListener;
        this.initializedProviderForTracking = new AtomicBoolean(false);
    }

    @Override
    protected LettuceConnectionProvider doCreateConnectionProvider(AbstractRedisClient client,
            RedisCodec<?, ?> codec) {
        LettuceConnectionProvider connectionProvider = super.doCreateConnectionProvider(client, codec);
        if (initializedProviderForTracking.compareAndSet(false, true)) {
            LOG.info("doCreateConnectionProvider, Creating a connection provider that will enable "
                    + "client tracking on its generated Redis connections");
            return new ClientTrackingLettuceConnectionProvider(connectionProvider, eventListener);
        } else {
            LOG.info("doCreateConnectionProvider, Creating a standard connection provider without any "
                    + "client tracking; set logging level to DEBUG for an in-depth explanation");
            if (LOG.isDebugEnabled()) {
                LOG.debug("doCreateConnectionProvider, Each Redis connection generated by Lettuce appears to "
                        + "be seen as a separate 'client' from the Redis server's point of view. To ensure "
                        + "that the KFS instance does not receive Redis notifications for its own Redis operations, "
                        + "we only enable client tracking on a single shared connection, which should theoretically "
                        + "be the regular non-reactive shared connection. (The reactive shared connection "
                        + "should not have client tracking enabled on it.)");
            }
            return connectionProvider;
        }
    }

    @Override
    public void destroy() {
        super.destroy();
        if (eventListener instanceof DisposableBean) {
            try {
                ((DisposableBean) eventListener).destroy();
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }
    }

}
